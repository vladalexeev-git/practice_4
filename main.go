package main

import (
	"city-server/api"
	"city-server/db"
	"city-server/repository"
	"database/sql"
	"fmt"
	_ "github.com/godror/godror"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"os"
)

var _port = ":8001"

func main() {
	// init db connection
	dsn := os.Getenv("DB_CONN")
	dbc, err := db.NewOracle(dsn)
	if err != nil {
		log.Fatal("can't connect", err)
	}

	// creating db table if not exists
	err = createTableIfNotExists(dbc)
	if err != nil {
		log.Fatal(err)
	}

	// init repo
	repo := repository.NewCityRepo(dbc)

	// init router
	r := mux.NewRouter()
	h := api.NewHandler(r, repo)

	cg := r.PathPrefix("/cities").Subrouter()
	cg.Handle("/id/{id}", http.HandlerFunc(h.GetCity)).Methods("GET")
	cg.Handle("/all", http.HandlerFunc(h.GetAllCities)).Methods("GET")
	cg.Handle("/id/{id}", http.HandlerFunc(h.ChangeCity)).Methods("PUT")
	cg.Handle("", http.HandlerFunc(h.AddCity)).Methods("POST")

	// starting server
	port := os.Getenv("PORT")
	if port == "" {
		port = _port
	}
	fmt.Println("Started server on port", port)
	log.Fatal(http.ListenAndServe(port, r))
}

// DDL
func createTableIfNotExists(db *sql.DB) error {
	ddl := `
	DECLARE
	   table_count INTEGER;
	BEGIN
	   SELECT COUNT(*) INTO table_count
	   FROM user_tables
	   WHERE table_name = 'CITIES';

	   IF table_count = 0 THEN
	      EXECUTE IMMEDIATE '
	      CREATE TABLE cities (
	         id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	         name VARCHAR2(100) NOT NULL,
	         population NUMBER NOT NULL
	      )';
	   END IF;
	END;
	`

	_, err := db.Exec(ddl)
	return err
}
